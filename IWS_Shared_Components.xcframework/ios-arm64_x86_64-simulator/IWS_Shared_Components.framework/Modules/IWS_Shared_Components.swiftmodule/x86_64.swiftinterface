// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IWS_Shared_Components
import Combine
import Foundation
@_exported import IWS_Shared_Components
import Swift
import SwiftUI
public protocol Logger {
  func info(_ object: Any?)
  func error(_ string: Swift.String?)
  func error(_ error: Swift.Error?)
  func debug(_ object: Any?)
  func warning(_ string: Swift.String?)
}
extension URLRequest {
  public var dataFromStream: Foundation.Data? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class URLProtocolMock : Foundation.URLProtocol {
  public static var testURLs: [Foundation.URL : Foundation.Data]
  public static var errorURLs: [Foundation.URL : (Swift.Error?, Swift.Int)]
  public static var requests: [Foundation.URLRequest]
  @objc override dynamic public class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic public class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc override dynamic public func startLoading()
  @objc override dynamic public func stopLoading()
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: Foundation.URLProtocolClient?)
  @objc deinit
}
public struct AlertView : SwiftUI.View {
  public init(viewModel: IWS_Shared_Components.AlertViewModel)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21IWS_Shared_Components9AlertViewV4bodyQrvp", 0) ðŸ¦¸
}
public typealias AlertButtonClosure = (() -> (Swift.Bool))
public protocol AlertViewDelegate : AnyObject {
  func alertShouldDismiss()
}
public class AlertButtonViewModel : Combine.ObservableObject, Swift.Identifiable {
  public init(title: Swift.String, isDestructive: Swift.Bool = false, onPressed: IWS_Shared_Components.AlertButtonClosure? = nil)
  public typealias ID = Swift.ObjectIdentifier
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class AlertViewModel : Combine.ObservableObject {
  public init(title: Swift.String, subtitle: Swift.String = "", buttons: [IWS_Shared_Components.AlertButtonViewModel], bodyView: SwiftUI.AnyView? = nil)
  public init(title: Swift.String, subtitle: Swift.String = "", bodyView: SwiftUI.AnyView? = nil)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct RestError {
  public let statusCode: Swift.Int
  public let error: Swift.Error?
  public let data: Foundation.Data?
  public init(error: Swift.Error?)
  public init(response: Foundation.HTTPURLResponse)
  public init(statusCode: Swift.Int, error: Swift.Error? = nil, response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
}
public enum IWSError : Swift.Error {
  case requestFailed
  case noInternet
  case invalidParameters(_: Swift.String)
  case biometricAttemptFailed(_: Swift.Int)
  case malformedJson
  case maxRetriesExceeded
}
public struct ActivityIndicator : SwiftUI.UIViewRepresentable {
  public typealias UIView = UIKit.UIActivityIndicatorView
  public var isAnimating: Swift.Bool
  public var configuration: (IWS_Shared_Components.ActivityIndicator.UIView) -> ()
  public init(isAnimating: Swift.Bool)
  public func makeUIView(context: SwiftUI.UIViewRepresentableContext<IWS_Shared_Components.ActivityIndicator>) -> IWS_Shared_Components.ActivityIndicator.UIView
  public func updateUIView(_ uiView: IWS_Shared_Components.ActivityIndicator.UIView, context: SwiftUI.UIViewRepresentableContext<IWS_Shared_Components.ActivityIndicator>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = IWS_Shared_Components.ActivityIndicator.UIView
}
@_hasMissingDesignatedInitializers public class AlertViewHostingController : SwiftUI.UIHostingController<IWS_Shared_Components.AlertView> {
  public init(viewModel: IWS_Shared_Components.AlertViewModel)
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  override public init(rootView: IWS_Shared_Components.AlertView)
  override public init?(coder aDecoder: Foundation.NSCoder, rootView: IWS_Shared_Components.AlertView)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension AlertViewHostingController : IWS_Shared_Components.AlertViewDelegate {
  public func alertShouldDismiss()
}
public enum RequestType : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentType : Swift.String {
  case urlEncoded
  case json
  case multipart
  public static let boundaryKey: Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Route {
  public var type: IWS_Shared_Components.RequestType
  public var path: Swift.String
  public var baseUrl: Swift.String
  public var headers: [Swift.String : Swift.String]
  public var body: Foundation.Data?
  public var cachePolicy: Foundation.NSURLRequest.CachePolicy
  public var queryItems: [Foundation.URLQueryItem]
  public var url: Foundation.URL? {
    get
  }
  public init(type: IWS_Shared_Components.RequestType, baseUrl: Swift.String, path: Swift.String, headers: [Swift.String : Swift.String] = [:], queryParameters: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil, cachePolicy: Foundation.NSURLRequest.CachePolicy = .useProtocolCachePolicy)
  public init<T>(type: IWS_Shared_Components.RequestType, baseUrl: Swift.String, path: Swift.String, headers: [Swift.String : Swift.String] = [:], queryParameters: [Swift.String : Swift.String] = [:], bodyType: T.Type, body: T, cachePolicy: Foundation.NSURLRequest.CachePolicy = .useProtocolCachePolicy) where T : Swift.Encodable
  public init(type: IWS_Shared_Components.RequestType, baseUrl: Swift.String, path: Swift.String, headers: [Swift.String : Swift.String] = [:], queryParameters: [Swift.String : Swift.String] = [:], jsonObjectBody: Any, cachePolicy: Foundation.NSURLRequest.CachePolicy = .useProtocolCachePolicy)
  public init?(type: IWS_Shared_Components.RequestType, urlString: Swift.String, cachePolicy: Foundation.NSURLRequest.CachePolicy = .useProtocolCachePolicy)
}
public protocol RoutesProtocol {
  associatedtype NetworkContext
  func route(with: Self.NetworkContext) -> IWS_Shared_Components.Route
}
public protocol NetworkManagerProtocol {
  associatedtype Routes
  func load<T>(route: Self.Routes, responseType: T.Type, completion: @escaping ((IWS_Shared_Components.Response<T>) -> Swift.Void)) where T : Swift.Decodable
}
public enum Response<T> {
  case success(T)
  case error(IWS_Shared_Components.RestError)
}
public protocol NetworkRetryProtocol {
  func shouldRetry(_ request: IWS_Shared_Components.Route, response: Foundation.URLResponse?, error: Swift.Error?, completion: @escaping (Swift.Bool) -> Swift.Void)
}
public class NetworkManager<Routes> : ObjectiveC.NSObject, IWS_Shared_Components.NetworkManagerProtocol, Foundation.URLSessionTaskDelegate, Foundation.URLSessionDelegate, Foundation.URLSessionDataDelegate where Routes : IWS_Shared_Components.RoutesProtocol {
  public init(sessionConfiguration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, networkContext: Routes.NetworkContext, logger: IWS_Shared_Components.Logger? = nil, retryHandler: IWS_Shared_Components.NetworkRetryProtocol? = nil)
  public func load<T>(route: Routes, responseType: T.Type, completion: @escaping ((IWS_Shared_Components.Response<T>) -> Swift.Void)) where T : Swift.Decodable
  public func load(route: Routes, completion: @escaping ((IWS_Shared_Components.Response<Foundation.Data?>) -> Swift.Void))
  public func load(request: IWS_Shared_Components.Route, route: Routes? = nil, completion: @escaping ((IWS_Shared_Components.Response<Foundation.Data?>) -> Swift.Void))
  public func update(networkContext: Routes.NetworkContext)
  @objc override dynamic public init()
  @objc deinit
}
extension IWS_Shared_Components.RequestType : Swift.Equatable {}
extension IWS_Shared_Components.RequestType : Swift.Hashable {}
extension IWS_Shared_Components.RequestType : Swift.RawRepresentable {}
extension IWS_Shared_Components.ContentType : Swift.Equatable {}
extension IWS_Shared_Components.ContentType : Swift.Hashable {}
extension IWS_Shared_Components.ContentType : Swift.RawRepresentable {}
